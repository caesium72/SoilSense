// Blynk Credentials
#define BLYNK_TEMPLATE_ID "TMPL6oLHTE8SV"
#define BLYNK_TEMPLATE_NAME "Irrigation Monitoring"
#define BLYNK_AUTH_TOKEN "vYcbYnCjJ6nCWpk7gCmDe0bOF95dKs-x"

// Libraries
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <DHT.h>

// Wi-Fi Credentials
char ssid[] = "Caesium";      // Your Wi-Fi name
char password[] = "helloworld"; // Your Wi-Fi password

// Pin Definitions
#define SOIL_MOISTURE_PIN 34  // Analog pin for soil moisture sensor
#define DHT_PIN 4             // Digital pin for DHT11 sensor
#define RELAY_PIN 5           // Pin for relay controlling irrigation
#define DHT_TYPE DHT11        // DHT sensor type

// DHT Object
DHT dht(DHT_PIN, DHT_TYPE);

// Variables
float moisture_percentage;
float temperature;
float humidity;
bool relayState = false;

// Blynk Virtual Pin Handler for Manual Relay Control
BLYNK_WRITE(V0) {
  int value = param.asInt(); // Get value from Blynk app (0 or 1)
  if (value == 1) {
    digitalWrite(RELAY_PIN, HIGH); // Turn relay ON
    relayState = true;
  } else {
    digitalWrite(RELAY_PIN, LOW);  // Turn relay OFF
    relayState = false;
  }
}

void setup() {
  // Start Serial Monitor
  Serial.begin(115200);

  // Initialize Pins
  pinMode(SOIL_MOISTURE_PIN, INPUT);
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW); // Relay OFF by default

  // Initialize DHT Sensor
  dht.begin();

  // Connect to Blynk using Wi-Fi credentials
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, password);
}

void loop() {
  Blynk.run(); // Handle Blynk communication

  // Read Sensor Data
  moisture_percentage = readSoilMoisture();
  temperature = dht.readTemperature();
  humidity = dht.readHumidity();

  // Check if sensor readings are valid
  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Failed to read from DHT sensor!");
  } else {
    // Send data to Blynk
    Blynk.virtualWrite(V3, moisture_percentage); // Soil moisture to V3
    Blynk.virtualWrite(V4, temperature);         // Temperature to V4
    Blynk.virtualWrite(V5, humidity);            // Humidity to V5
  }

  // Automatic Irrigation Control (if not manually overridden)
  if (!relayState) {
    if (moisture_percentage < 30) { // Adjust threshold as needed
      digitalWrite(RELAY_PIN, HIGH); // Turn ON irrigation
    } else {
      digitalWrite(RELAY_PIN, LOW);  // Turn OFF irrigation
    }
  }

  // Print to Serial Monitor
  Serial.print("Moisture: ");
  Serial.print(moisture_percentage);
  Serial.print("% | Temp: ");
  Serial.print(temperature);
  Serial.print("Â°C | Humidity: ");
  Serial.print(humidity);
  Serial.println("%");

  delay(2000); // Update every 2 seconds
}

// Function to Read Soil Moisture
float readSoilMoisture() {
  int rawValue = analogRead(SOIL_MOISTURE_PIN); // Read analog value
  // Convert to percentage (calibrate based on your sensor)
  float percentage = map(rawValue, 4095, 0, 0, 100); // 4095 = dry, 0 = wet
  return percentage;
}
